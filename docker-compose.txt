# version: '3.8'
networks:
  my_app_net:
services:
  redis:
    image: redis:7-alpine
    ports:
      - '6379:6379'
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - my_app_net
    restart: unless-stopped

  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - '5433:5432'
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER}']
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - my_app_net
    restart: unless-stopped

  web:
    build:
      context: .
      target: runtime
    # no host => code baked in image
    ports:
      - '5000:5000'
    env_file:
      - .env
    environment:
      DATABASE_URL:     ${DATABASE_URL}
      FLASK_SECRET_KEY: ${FLASK_SECRET_KEY}
      FERNET_KEY:       ${FERNET_KEY}
      REDIS_URL:        ${REDIS_URL}
      RATELIMIT_STORAGE_URI: ${REDIS_URL}
      METRICS_USER:     ${METRICS_USER}
      METRICS_PASSWORD: ${METRICS_PASSWORD}
      CELERY_BROKER_URL:    ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
      FLASK_APP: main:app
      FLASK_ENV: production
    networks:
      - my_app_net
    command: >
      sh -c "flask db upgrade && exec gunicorn -k geventwebsocket.gunicorn.workers.GeventWebSocketWorker --worker-connections 1000 --bind 0.0.0.0:5000 main:app"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/healthz"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  celery_worker:
    build:
      context: .
      target: runtime
    user: app
    command: >
      sh -c "flask db upgrade && celery -A celery_app:celery worker --loglevel=info"
    env_file:
      - .env
    environment:
      DATABASE_URL:     ${DATABASE_URL}
      FLASK_SECRET_KEY: ${FLASK_SECRET_KEY}
      FERNET_KEY:       ${FERNET_KEY}
      REDIS_URL:        ${REDIS_URL}
      CELERY_BROKER_URL:    ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
      METRICS_USER:     ${METRICS_USER}
      METRICS_PASSWORD: ${METRICS_PASSWORD}
      FLASK_APP: main:app
      FLASK_ENV: production
      CELERY_BEAT_SCHEDULE_DIR: /data
    volumes:
      - beatdata:/data    # share schedule DB
    depends_on:
      - web
      - redis
      - db
    ports:
      - '8000:8000' # metrics
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/metrics"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - my_app_net
    restart: unless-stopped

  celery_beat:
    build:
      context: .
      target: runtime
    user: app
    command: >
      sh -c "flask db upgrade && celery -A celery_app:celery beat --loglevel=info"
    env_file:
      - .env
    environment:
      DATABASE_URL:     ${DATABASE_URL}
      FLASK_SECRET_KEY: ${FLASK_SECRET_KEY}
      FERNET_KEY:       ${FERNET_KEY}
      REDIS_URL:        ${REDIS_URL}
      CELERY_BROKER_URL:    ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
      METRICS_USER:     ${METRICS_USER}
      METRICS_PASSWORD: ${METRICS_PASSWORD}
      FLASK_APP: main:app
      FLASK_ENV: production
      CELERY_BEAT_SCHEDULE_DIR: /data
    volumes:
      - beatdata:/data
    depends_on:
      - web
      - redis
      - db
    networks:
      - my_app_net
    restart: unless-stopped

volumes:
  db-data:
  beatdata:
    driver: local
