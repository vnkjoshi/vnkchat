# version: '3.8'
services:
  web:
    build:
      context: .
      target: builder
    volumes:
      - .:/app
    ports:
      - '5000:5000'
    env_file:
      - .env
    environment:
      DATABASE_URL:     ${DATABASE_URL}
      FLASK_SECRET_KEY: ${FLASK_SECRET_KEY}
      FERNET_KEY:       ${FERNET_KEY}
      REDIS_URL:        ${REDIS_URL}
      METRICS_USER:     ${METRICS_USER}
      METRICS_PASSWORD: ${METRICS_PASSWORD}
      CELERY_BROKER_URL:    ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
      FLASK_ENV: development
      FLASK_APP: main:app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/healthz"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 10s
    command: >
      sh -c "flask db upgrade && exec gunicorn -k geventwebsocket.gunicorn.workers.GeventWebSocketWorker --worker-connections 1000 --bind 0.0.0.0:5000 main:app"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started

  celery_worker:
    build:
      context: .
      target: builder
    user: app
    volumes:
      - .:/app
      - beatdata:/data
    ports:
      - '8000:8000'
    env_file:
      - .env
    environment:
      DATABASE_URL:     ${DATABASE_URL}
      FLASK_SECRET_KEY: ${FLASK_SECRET_KEY}
      FERNET_KEY:       ${FERNET_KEY}
      REDIS_URL:        ${REDIS_URL}
      CELERY_BROKER_URL:    ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
      METRICS_USER:     ${METRICS_USER}
      METRICS_PASSWORD: ${METRICS_PASSWORD}
      FLASK_ENV: development
      FLASK_APP: main:app
      CELERY_BEAT_SCHEDULE_DIR: /data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/metrics"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 10s
    command: >
      sh -c "flask db upgrade && celery -A celery_app:celery worker --loglevel=info --pool=solo"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started

  celery_beat:
    build:
      context: .
      target: builder
    user: app
    volumes:
      - .:/app
      - beatdata:/data
    env_file:
      - .env
    environment:
      DATABASE_URL:     ${DATABASE_URL}
      FLASK_SECRET_KEY: ${FLASK_SECRET_KEY}
      FERNET_KEY:       ${FERNET_KEY}
      REDIS_URL:        ${REDIS_URL}
      CELERY_BROKER_URL:    ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
      METRICS_USER:     ${METRICS_USER}
      METRICS_PASSWORD: ${METRICS_PASSWORD}
      FLASK_ENV: development
      FLASK_APP: main:app
      CELERY_BEAT_SCHEDULE_DIR: /data
    command: >
      sh -c "flask db upgrade && celery -A celery_app:celery beat --loglevel=info"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started